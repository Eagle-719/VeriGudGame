# -*- coding: utf-8 -*-
"""Data Visualisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNRqBSbyA007y4_hDfSELidyDwJ9JQ64
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import numpy as np
import sympy as sp
from scipy.optimize import curve_fit # Az illesztéshez használt függvény

freqE, ampE, ph1E, ph2E, phaseE = loadtxt("ProcessedData_Empty.txt", unpack=True)
freqASo, ampASo, ph1ASo, ph2ASo, phaseASo = loadtxt("ProcessedData_Al_Solid.txt", unpack=True)
freqASm, ampASm, ph1ASm, ph2ASm, phaseASm = loadtxt("ProcessedData_Al_Small.txt", unpack=True)
freqAB, ampAB, ph1AB, ph2AB, phaseAB = loadtxt("ProcessedData_Al_Big.txt", unpack=True)
freqCSo, ampCSo, ph1CSo, ph2CSo, phaseCSo = loadtxt("ProcessedData_Cu_Solid.txt", unpack=True)
freqCSm, ampCSm, ph1CSm, ph2CSm, phaseCSm = loadtxt("ProcessedData_Cu_Small.txt", unpack=True)
freqCB, ampCB, ph1CB, ph2CB, phaseCB = loadtxt("ProcessedData_Cu_Big.txt", unpack=True)
freqFSo, ampFSo, ph1FSo, ph2FSo, phaseFSo = loadtxt("ProcessedData_Fe_Solid.txt", unpack=True)
freqFSm, ampFSm, ph1FSm, ph2FSm, phaseFSm = loadtxt("ProcessedData_Fe_Small.txt", unpack=True)
freqFB, ampFB, ph1FB, ph2FB, phaseFB = loadtxt("ProcessedData_Fe_Big.txt", unpack=True)
freqAC2, ampAC2, ph1AC2, ph2AC2, phaseAC2 = loadtxt("ProcessedData_C2_Al.txt", unpack=True)
freqAC3, ampAC3, ph1AC3, ph2AC3, phaseAC3 = loadtxt("ProcessedData_C3_Al.txt", unpack=True)
freqFR20, ampFR20, ph1FR20, ph2FR20, phaseFR20 = loadtxt("ProcessedData_R20_Fe.txt", unpack=True)

scatter(freqE, ampE, c='green', s=1.3, label='Empty')
scatter(freqASo, ampASo, c='blue', s=1.3, label='Aluminium')
scatter(freqCSo, ampCSo, c='orange', s=1.3, label='Copper')
scatter(freqFSo, ampFSo, c='red', s=1.3, label='Iron')
plt.title('Voltage ratio for different materials')
plt.xlabel('frequency [Hz]')
plt.ylabel('Voltage ratio [1]')
plt.legend()
plt.savefig('Voltage ratio for different materials.jpg', dpi=1000)

scatter(freqASo, ampASo, c='blue', s=1.3, label='r = 0 mm')
scatter(freqASm, ampASm, c='orange', s=1.3, label='r = 3 mm')
scatter(freqAB, ampAB, c='red', s=1.3, label='r = 6 mm')
plt.title('Different holes for aluminium')
plt.xlabel('frequency [Hz]')
plt.ylabel('Voltage ratio [1]')
plt.legend()
plt.savefig('Different holes for aluminium.jpg', dpi=1000)

scatter(freqCSo, ampCSo, c='blue', s=1.3, label='r = 0 mm')
scatter(freqCSm, ampCSm, c='orange', s=1.3, label='r = 3 mm')
scatter(freqCB, ampCB, c='red', s=1.3, label='r = 6 mm')
plt.title('Different holes for copper')
plt.xlabel('frequency [Hz]')
plt.ylabel('Voltage ratio [1]')
plt.legend()
plt.savefig('Different holes for copper.jpg', dpi=1000)

scatter(freqFSo, ampFSo, c='blue', s=1.3, label='r = 0 mm')
scatter(freqFSm, ampFSm, c='orange', s=1.3, label='r = 3 mm')
scatter(freqFB, ampFB, c='red', s=1.3, label='r = 6 mm')
plt.title('Different holes for iron')
plt.xlabel('frequency [Hz]')
plt.ylabel('Voltage ratio [1]')
plt.legend()
plt.savefig('Different holes for iron.jpg', dpi=1000)

scatter(freqASo, ampASo, c='blue', s=1.3, label='Capacitor 1')
scatter(freqAC2, ampAC2, c='orange', s=1.3, label='Capacitor 2')
scatter(freqAC3, ampAC3, c='red', s=1.3, label='Capacitor 3')
plt.title('Different capacitors (solid aluminium)')
plt.xlabel('frequency [Hz]')
plt.ylabel('Voltage ratio [1]')
plt.legend()
plt.savefig('Different capacitors (solid aluminium).jpg', dpi=1000)

scatter(freqFSo, ampFSo, c='blue', s=1.3, label='Resistor 1')
scatter(freqFR20, ampFR20, c='orange', s=1.3, label='Resistor 2')
plt.title('Different resistors (solid iron)')
plt.xlabel('frequency [Hz]')
plt.ylabel('Voltage ratio [1]')
plt.legend()
plt.savefig('Different resistors (solid iron).jpg', dpi=1000)

scatter(freqE, ampE, s=10, label='Empty coil')
plt.title('Voltage ratio for empty coil')
plt.xlabel('frequency [Hz]')
plt.ylabel('Voltage ratio [1]')
plt.legend()
plt.savefig('Voltage ratio for empty coil.jpg', dpi=1000)

scatter(freqE,phaseE,s=10, label='Empty coil')
plt.title('Phase angle for empty coil')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Phase angle [rad]')
plt.legend()
plt.savefig('Phase angle for empty coil.jpg', dpi=1000)

def ampFit(x,L,dR,C=272e-12,R=289,R0=16.4):
  return R/np.sqrt((R+R0+dR)**2+((L*x)-(1/(C*x)))**2)

popt,pcov=curve_fit(ampFit,freqE,ampE,p0=[0.033,0], method='lm',maxfev=500000000) # az illesztés elvégzése
perr = sqrt(diag(pcov))  # az illesztési paraméterek hibáinak meghatározása
fittedAmpList=[ampFit(x,popt[0],popt[1]) for x in freqE]
plot(freqE,fittedAmpList,label='Fitted curve', color ='r')
scatter(freqE, ampE)

phaseList=[]
for i in range(0,len(phase1List)):
  phase = phase1List[i]-phase2List[i]
  while phase>(np.pi/2):
    phase=phase-(np.pi)
  while phase<(-np.pi/2):
    phase=phase+(np.pi)
  phaseList.append(phase)

def phaseFit(x,L,dR,C,R):
  return np.arctan(((L*2*np.pi*x)-1/(C*2*np.pi*x))/(R+dR))

def phaseGuess(x,L=0.02,dR=0,C=220e-12,R=265):
  return np.arctan(((L*2*np.pi*x)-1/(C*2*np.pi*x))/(R+dR))

scatter(freqList,phaseList)
scatter(freqList,[phaseGuess(x) for x in freqList])

popt,pcov=curve_fit(phaseGuess,freqList,phaseList,p0=[0.02,0], method='lm',maxfev=500000000) # az illesztés elvégzése
perr = sqrt(diag(pcov))  # az illesztési paraméterek hibáinak meghatározása
fittedPhaseList=[phaseGuess(x,popt[0],popt[1]) for x in freqList]
scatter(freqList,fittedPhaseList,label='Fitted curve', color ='r', s = 1)
scatter(freqList,phaseList, label='Data', s = 1)
legend()
plt.annotate((popt[0],popt[1]),[-0.5,50000],c='blue')